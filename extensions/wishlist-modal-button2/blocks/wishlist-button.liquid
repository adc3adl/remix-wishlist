<!-- ‚ù§Ô∏è Wishlist Button -->
<!-- ‚ù§Ô∏è Wishlist Button -->
<button
  type="button"
  class="wishlist-button hidden-before-init"
  data-variant-id="{{ product.selected_or_first_available_variant.id }}"
  aria-label="Toggle wishlist"
>
  <svg
    class="wishlist-icon"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="#e63946"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    width="24"
    height="24"
  >
    <path d="M20.8 4.6c-1.5-1.4-3.9-1.4-5.4 0L12 8l-3.4-3.4c-1.5-1.4-3.9-1.4-5.4 0-1.5 1.5-1.5 3.9 0 5.4l8.8 8.8 8.8-8.8c1.5-1.5 1.5-3.9 0-5.4z"/>
  </svg>
</button>


<!-- üîí Modal for unauthorized users -->
<div id="wishlist-login-modal" class="wishlist-login-modal hidden">
  <div class="wishlist-login-content">
     <p>${window.i18n.t("wishlist_login")}</p>
    <button id="wishlist-login-close" class="wishlist-login-close">‚úï</button>
  </div>
</div>

<style>
  .wishlist-button {
    position: absolute !important;
    top: 10px !important;
    right: 10px !important;
    z-index: 10 !important;
    cursor: pointer;
    display: inline-block;
    padding: 0;
    background: none;
    border: none;
    pointer-events: auto;
    transition: visibility 0.2s ease, opacity 0.2s ease;
    opacity: 1;
  }

  .wishlist-button svg {
    stroke: #e63946;
    fill: none;
  }

  .wishlist-button.added svg {
    fill: #e63946;
  }

  .wishlist-button:hover svg {
    transform: scale(1.1);
  }

  .wishlist-button.hidden-before-init {
    opacity: 0;
    pointer-events: none;
  }

  .wishlist-button:not(.hidden-before-init) {
    transition: opacity 0.3s ease;
    opacity: 1;
    pointer-events: auto;
  }

  .wishlist-icon.pulse {
    animation: pulse 0.25s ease;
  }

  @keyframes pulse {
    0%   { transform: scale(1); }
    40%  { transform: scale(1.3); }
    100% { transform: scale(1); }
  }

  .wishlist-login-modal {
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  }

  .wishlist-login-modal.show {
    display: flex;
  }

  .wishlist-login-content {
    background: white;
    padding: 20px 30px;
    border-radius: 10px;
    font-family: sans-serif;
    position: relative;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
  }

  .wishlist-login-close {
    position: absolute;
    top: 8px;
    right: 12px;
    background: transparent;
    border: none;
    font-size: 20px;
    cursor: pointer;
    color: #999;
  }

  .wishlist-login-close:hover {
    color: #222;
  }
</style>

<script>
  window.API_URL = window.API_URL || "https://remix-wishlist.onrender.com";
  window.cachedWishlistIds = [];

  function updateWishlistIcon(el, isAdded, isFromClick = false) {
    const svg = el.querySelector("svg");
    if (!svg) return;

    el.classList.toggle("added", isAdded);
    svg.setAttribute("fill", isAdded ? "#e63946" : "none");
    svg.setAttribute("stroke", "#e63946");
    el.classList.remove("hidden-before-init");

    if (isFromClick) {
      svg.classList.remove("pulse");
      void svg.offsetWidth;
      svg.classList.add("pulse");
    }
  }

  async function toggleWishlist(el) {
    if (el.dataset.processing === "true" || el.dataset.initialized !== "true") return;
    const variantId = el.dataset.variantId;
    const customerId = window.customerId;
    if (!customerId || !variantId) return;

    el.dataset.processing = "true";
    const isCurrentlyAdded = window.cachedWishlistIds.includes(variantId);
    const optimisticState = !isCurrentlyAdded;
    updateWishlistIcon(el, optimisticState, true);

    try {
      const res = await fetch(`${window.API_URL}/api/wishlist`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "ngrok-skip-browser-warning": "true",
        },
        body: JSON.stringify({
          customerId,
          variantId,
          action: optimisticState ? "add" : "remove",
        }),
      });

      const data = await res.json();
      if (data?.status === "ok") {
        const ids = data.wishlist.map((p) => String(p.id || p));
        window.cachedWishlistIds = ids;
      } else {
        updateWishlistIcon(el, isCurrentlyAdded);
      }
    } catch (err) {
      updateWishlistIcon(el, isCurrentlyAdded);
    } finally {
      el.dataset.processing = "false";
    }
  }

  async function initializeWishlistButtons() {
    const buttons = document.querySelectorAll(".wishlist-button");
    const loginModal = document.getElementById("wishlist-login-modal");
    const loginClose = document.getElementById("wishlist-login-close");

    loginClose?.addEventListener("click", () => {
      loginModal?.classList.remove("show");
    });

    if (!window.customerId) {
      buttons.forEach((btn) => {
        btn.classList.remove("hidden-before-init");
        btn.dataset.initialized = "true";
      });
      return;
    }

    try {
      const res = await fetch(`${window.API_URL}/api/wishlist-get?customerId=${window.customerId}`, {
        headers: { "ngrok-skip-browser-warning": "true" },
      });
      const data = await res.json();
      window.cachedWishlistIds = data.products?.map((p) => String(p.id)) || [];
    } catch (e) {
      console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å wishlist", e);
      return;
    }

    const variantId = getCurrentVariantIdFromUrl();
    buttons.forEach((btn) => {
      if (variantId) btn.setAttribute("data-variant-id", variantId);
      btn.dataset.initialized = "true";

      const isInWishlist = window.cachedWishlistIds.includes(variantId);
      updateWishlistIcon(btn, isInWishlist);

      btn.addEventListener("click", () => {
        if (!window.customerId) {
          loginModal?.classList.add("show");
          return;
        }
        toggleWishlist(btn);
      });
    });
  }

  function recreateWishlistButtons(newVariantId) {
    document.querySelectorAll(".wishlist-button").forEach((oldBtn) => {
      const parent = oldBtn.parentElement;
      const newBtn = oldBtn.cloneNode(true);

      newBtn.setAttribute("data-variant-id", newVariantId);
      newBtn.classList.remove("added", "hidden-before-init");
      newBtn.dataset.initialized = "true";

      const isInWishlist = window.cachedWishlistIds.includes(newVariantId);
      updateWishlistIcon(newBtn, isInWishlist);

      newBtn.addEventListener("click", () => {
        if (!window.customerId) {
          document.getElementById("wishlist-login-modal")?.classList.add("show");
          return;
        }
        toggleWishlist(newBtn);
      });

      parent.replaceChild(newBtn, oldBtn);
    });
  }

  function getCurrentVariantIdFromUrl() {
    const params = new URLSearchParams(window.location.search);
    return params.get("variant");
  }

  document.addEventListener("DOMContentLoaded", () => {
    initializeWishlistButtons();

    let lastVariantId = getCurrentVariantIdFromUrl();

    // ‚úÖ –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º variantId –≤ URL
    setInterval(() => {
      const current = getCurrentVariantIdFromUrl();
      if (current && current !== lastVariantId) {
        lastVariantId = current;
        recreateWishlistButtons(current);
        console.log("üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ variantId –≤ URL:", current);
      }
    }, 500);
  });
</script>
{% schema %}
{
  "name": "Wishlist Button",
  "target": "section",
  "settings": []
}
{% endschema %}